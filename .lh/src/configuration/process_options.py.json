{
    "sourceFile": "src/configuration/process_options.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1652771523125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1652771532565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from loguru import logger\n from distutils.command.config import config\n from .misc import check_folder\n from loggers import setup_logging\n from typing import Any, Dict, List, Optional\n"
                }
            ],
            "date": 1652771523125,
            "name": "Commit-0",
            "content": "from distutils.command.config import config\nfrom .misc import check_folder\nfrom loggers import setup_logging\nfrom typing import Any, Dict, List, Optional\nfrom pathlib import PurePath\nimport pprint\nfrom enums import RunMode\n\nlogger = logging.getLogger(__name__)\n\n\nclass Process_options:\n    setting_format = Optional[Dict[str, Any]]\n    def __init__(self, args: setting_format):\n        self._args = args\n        self._config: self.setting_format = None\n        self._yaml: self.setting_format = None\n\n    def _process_logging_options(self, args: setting_format):\n        \"\"\"\n        change logger level\n        \"\"\"\n        # TODO: change to PurePath\n        from constants import DEFAULT_LOG_FILE_DIR\n        logger.debug('process logging options')\n\n        filename = self._args['logfile'].split('/')[-1]\n\n        # args and default\n        args['logfile'] = f\"{DEFAULT_LOG_FILE_DIR}/{filename}\"\n\n        if 'logfile' in self._yaml and self._yaml['logfile'] is not None:\n            # yaml\n            args['logfile'] = f\"{DEFAULT_LOG_FILE_DIR}/{self._yaml['logfile']}\"\n\n        check_folder(DEFAULT_LOG_FILE_DIR)\n            \n        setup_logging(args)\n\n    def _process_api(self, args: setting_format):\n        \"\"\"\n        setting which source api featrue do you want\n        \"\"\"\n        logger.debug(\"process api options\")\n        # print(self._yaml)\n        bbgo = self._yaml['bbgo']\n        ccxt = self._yaml['ccxt']\n        args.update(bbgo)\n\n        \n    def _process_exchange_options(self, args: setting_format):\n        logger.debug(\"process exchange options\")\n        # TODO: process exchange yaml\n        exchange_yaml = self._yaml['exchange']\n        \n        exchange = {**exchange_yaml}\n        args.update(exchange)\n\n\n\n\n    def _process_sync_options(self, args: setting_format):\n        logger.debug(\"process sync options\") \n\n        ## process yaml sync \n        yaml_sync_dict = self._yaml['sync']\n        # pprint.pprint(self._yaml)\n        # print('\\n')\n        # print(yaml_sync_dict)\n        # exit()\n        if args['runmode'] == RunMode.SYNC:\n            args['symbols'] = yaml_sync_dict['sync_symbols']\n\n        # process startAt amd emdAt\n        if 'startAt' in args == False or args['startAt'] is None:\n            args['startAt'] = yaml_sync_dict['startAt']\n        if 'endAt' in args == False or args['endAt'] is None:\n            args['endAt'] = yaml_sync_dict['endAt']\n\n        del yaml_sync_dict['startAt']\n        del yaml_sync_dict['endAt']\n        del yaml_sync_dict['sync_symbols']\n\n        args.update(yaml_sync_dict)\n        \n     \n    def _process_persistece_options(self, args: setting_format):\n            logger.debug(\"process persistence options\") \n\n            from constants import (DEFAULT_DB_HOST, DEFAULT_DB_PORT, DEFAULT_DB_USER,\n            DEFAULT_USERDATA_DIR, DEFAULT_DB_DIR, DEFAULT_DB_NAME)\n            # print(self._yaml)\n            config_persistence = self._yaml['persistence']\n            config_db_path: str = str(PurePath(DEFAULT_USERDATA_DIR,config_persistence['path']))\n            config_db_name: str = config_persistence['name']\n            config_db_user: str = config_persistence['user']\n            config_db_port: int = config_persistence['port']\n            config_db_host = config_persistence['host']\n\n            # default and args\n            persistence = {\n                'db': config_persistence['db'],\n                'db_password': config_persistence['password'],\n                'db_path': args['db_path'],\n                'db_name': args['db_name'],\n                'db_user': args['db_user'],\n                'db_port': args['db_port'],\n                'db_host': args['db_host'],\n            }\n            # print(args, '\\n')\n            # print(config_persistence, '\\n')\n\n            # TODO: refactor\n            # config\n            if args['db_path'] == DEFAULT_DB_DIR and DEFAULT_DB_DIR != config_db_path:\n                persistence['db_path'] = config_persistence['path'] \n                # print(\"database_path: \" + db_path)\n            \n            if args['db_name'] == DEFAULT_DB_NAME and DEFAULT_DB_NAME != config_db_name:\n                persistence['db_name'] = config_persistence['name']\n                # print(\"database name: \" + db_name)\n            \n            if args['db_user'] == DEFAULT_DB_USER and DEFAULT_DB_USER != config_db_user:\n                persistence['db_user'] = config_persistence['user']\n\n            if args['db_port'] == DEFAULT_DB_PORT and DEFAULT_DB_PORT != config_db_port:\n                persistence['db_port'] = config_persistence['port']\n\n            if args ['db_host']  == DEFAULT_DB_HOST and DEFAULT_DB_HOST != config_db_host:\n                persistence['db_host'] = config_persistence['host']\n            args.update(persistence)\n"
        }
    ]
}