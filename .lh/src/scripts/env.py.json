{
    "sourceFile": "src/scripts/env.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1652524046191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1652524046191,
            "name": "Commit-0",
            "content": "# alembic\nfrom logging.config import fileConfig\nfrom sqlalchemy import engine_from_config, pool\nfrom alembic import context\nfrom pathlib import Path\n# context.config.set_main_option('prepend_sys_path', str(Path.cwd()))\nimport sys\nsys.path.append(str(Path.cwd().parent))\n# print(sys.path)\nfrom scripts.utils.configuration_alembic import Configuration_alembic\nfrom persistence.migrations import init_db_url\nfrom persistence.models import metadata_obj\n\n# logger = logging.getLogger(__name__)\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\n# if config.config_file_name is not None:\n#     fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = None\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\ndef get_db_url():\n    autogenerate = vars(config.cmd_opts)['autogenerate']\n    if autogenerate:\n        c = Configuration_alembic()\n        configured = c.get_config()\n        url = init_db_url(**configured)\n        config.set_main_option('sqlalchemy.url', url)\n        print('In autogenerate mode url is :' + url)\n    return None\n    \ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n        \n# if in --autogenerate mode detect yaml file, catch the config\nif hasattr(config.cmd_opts, 'autogenerate'):\n    get_db_url()\nprint(config.get_context())\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"
        }
    ]
}